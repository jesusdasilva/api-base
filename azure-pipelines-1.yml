# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- main

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '5f9b0eb2-ec46-4bb9-8305-a8e3684eb201'
  imageRepository: 'apibase'
  containerRegistry: 'aksprueba.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildId)'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Test
  displayName: Test stage
  jobs:
  - job: Test
    displayName: Run tests
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '20.x'
      displayName: 'Install Node.js'

    - script: |
        npm install
      displayName: 'Install dependencies'

    - script: |
        npm test
      displayName: 'Run tests'

- stage: Build
  displayName: Build and push stage
  dependsOn: Test
  condition: succeeded()
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Cache@2
      inputs:
        key: 'docker | $(Agent.OS) | Dockerfile'
        path: /tmp/docker
        restoreKeys: |
          docker | $(Agent.OS)
        cacheHitVar: 'DOCKER_CACHE_HIT'

    - script: |
        echo "##[group]Build Docker Image"
        docker build --cache-from=type=local,src=/tmp/docker --tag $(containerRegistry)/$(imageRepository):$(tag) --file $(dockerfilePath) .
        echo "##[endgroup]"
      displayName: 'Build Docker image'

    - script: |
        echo "##[group]Push Docker Image"
        docker push $(containerRegistry)/$(imageRepository):$(tag)
        echo "##[endgroup]"
      displayName: 'Push Docker image'

    - script: |
        echo "##[group]Save Docker layers to local tar file"
        mkdir -p /tmp/docker
        docker save $(containerRegistry)/$(imageRepository):$(tag) -o /tmp/docker/$(tag).tar
        echo "##[endgroup]"
      displayName: 'Save Docker layers to local tar file'
      condition: succeeded()

    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: /tmp/docker
        artifact: 'docker-cache'
        publishLocation: 'pipeline'
