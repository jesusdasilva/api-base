# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- main

resources:
- repo: self

parameters:
- name: environment
  displayName: 'Select Environment'
  type: string
  default: 'apibase.production'
  values:
  - 'apibase.production'
  - 'apibase.development'

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '7a3a58e8-7d86-4443-9d08-5add0011c1a9'
  imageRepository: 'apibase'
  containerRegistry: 'acrprueba.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'acrprueba12bb-auth'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Test
  displayName: Test stage
  jobs:
  - job: Test
    displayName: Run tests
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '20.x'
      displayName: 'Install Node.js'

    - script: |
        npm install
      displayName: 'Install dependencies'

    - script: |
        npm test
      displayName: 'Run tests'

- stage: Build
  displayName: Build stage
  dependsOn: Test
  condition: succeeded()
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Cache@2
      inputs:
        key: 'docker | $(Agent.OS) | Dockerfile'
        path: '/tmp/docker'
        restoreKeys: |
          docker | $(Agent.OS)
        cacheHitVar: 'DOCKER_CACHE_HIT'

    - script: |
        echo "##[group]Build and Push Docker Image"
        docker build \
          --cache-from=type=local,src=/tmp/docker \
          --tag $(containerRegistry)/$(imageRepository):$(tag) \
          --file $(dockerfilePath) .
        echo "##[endgroup]"
      displayName: 'Build Docker image'

    - script: |
        docker push $(containerRegistry)/$(imageRepository):$(tag)
      displayName: 'Push Docker image'

    - script: |
        mkdir -p /tmp/docker
        docker builder prune --force --filter until=24h
        docker save $(containerRegistry)/$(imageRepository):$(tag) | tar -C /tmp/docker -cvf $(tag).tar -
      displayName: 'Save Docker layers to local tar file'

    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '/tmp/docker'
        artifact: 'docker-cache'
        publishLocation: 'pipeline'

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: ${{ parameters.environment }}
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              artifactName: 'docker-cache'
              targetPath: '/tmp/docker'

          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.yml
                $(Pipeline.Workspace)/manifests/service.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)
